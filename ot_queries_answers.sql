
# 1. Find the total sales revenue generated by each employee.
SELECT 
	e.employee_id,
    e.first_name,
    e.last_name,
    SUM(oi.quantity * oi.unit_price) AS total_sales_revenue
FROM
	employees e
JOIN
	orders o ON e.employee_id = o.salesman_id
JOIN
	order_items oi ON o.order_id = oi.order_id
GROUP BY
	e.employee_id, e.first_name, e.last_name
ORDER BY
	total_sales_revenue DESC;

# 2. Retrieve the top 5 customers with the highest credit limits.

SELECT 
    customer_id, name, credit_limit
FROM
    customers
ORDER BY credit_limit DESC
LIMIT 5;

# 3. List the products with their categories and the total quantity available in each warehouse.

SELECT 
    p.product_id,
    p.product_name,
    pc.category_name,
    w.warehouse_id,
    SUM(i.quantity) AS total_quantity
FROM
    products p
        JOIN
    product_categories pc ON p.category_id = pc.category_id
        JOIN
    inventories i ON p.product_id = i.product_id
        JOIN
    warehouses w ON i.warehouse_id = w.warehouse_id
GROUP BY p.product_id , p.product_name , pc.category_name , w.warehouse_id
ORDER BY p.product_id , w.warehouse_id;

# 4. Find the customers information of those who have had their orders Canceled or their order status is Pending

SELECT 
    c.customer_id,
    c.name,
    c.address,
    c.website,
    c.credit_limit,
    o.order_id,
    o.status
FROM
    customers c
        JOIN
    orders o ON c.customer_id = o.customer_id
WHERE
    o.status IN ('Canceled' , 'Pending')
ORDER BY c.customer_id;

# 5. Calculate the average standard cost and list price for each product category.

SELECT 
    pc.category_id,
    pc.category_name,
    AVG(p.standard_cost) AS avg_standard_cost,
    AVG(p.list_price) AS avg_list_price
FROM
    products p
        JOIN
    product_categories pc ON p.category_id = pc.category_id
GROUP BY pc.category_id , pc.category_name
ORDER BY pc.category_id;

# 6. Retrieve the top 3 best-selling products in terms of total quantity sold.

SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold
FROM
    products p
        JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY p.product_id , p.product_name
ORDER BY total_quantity_sold DESC
LIMIT 3;

# 7. Find the customers who have placed orders for products from more than two different categories.

SELECT 
    c.customer_id,
    c.name,
    COUNT(DISTINCT pc.category_name) AS category_count
FROM
    customers c
        JOIN
    orders o ON c.customer_id = o.customer_id
        JOIN
    order_items oi ON o.order_id = oi.order_id
        JOIN
    products p ON oi.product_id = p.product_id
        JOIN
    product_categories pc ON p.category_id = pc.category_id
GROUP BY c.customer_id , c.name
HAVING category_count > 2
ORDER BY category_count DESC;

# 8. List the sales revenue generated by each product category in descending order.

SELECT 
    pc.category_id,
    pc.category_name,
    SUM(oi.quantity * oi.unit_price) AS total_sales_revenue
FROM
    product_categories pc
        JOIN
    products p ON pc.category_id = p.category_id
        JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY pc.category_id , pc.category_name
ORDER BY total_sales_revenue DESC;

# 9. Retrieve the employees who have not been assigned as managers to any other employee.

SELECT 
    e.employee_id, e.first_name, e.last_name, e.manager_id
FROM
    employees e
WHERE
    e.employee_id NOT IN (SELECT DISTINCT
            manager_id
        FROM
            employees
        WHERE
            manager_id IS NOT NULL);

# 10. Calculate the average credit limit for customers in each region.

SELECT 
    r.region_id,
    r.region_name,
    AVG(c.credit_limit) AS avg_credit_limit
FROM
    customers c
        JOIN
    orders o ON c.customer_id = o.customer_id
        JOIN
    order_items oi ON o.order_id = oi.order_id
        JOIN
    inventories i ON oi.product_id = i.product_id
        JOIN
    warehouses w ON i.warehouse_id = w.warehouse_id
        JOIN
    locations l ON w.location_id = l.location_id
        JOIN
    countries co ON l.country_id = co.country_id
        JOIN
    regions r ON co.region_id = r.region_id
GROUP BY r.region_id , r.region_name
ORDER BY avg_credit_limit;